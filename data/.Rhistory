# Read in responses from Google form
mentors <- read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/Mentoring/rawdata/become-a-mentor-1-24-17.csv",
stringsAsFactors = FALSE, na.strings = "")
mentees <- read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/Mentoring/rawdata/find-a-mentor-1-24-17.csv",
stringsAsFactors = FALSE, na.strings = "")
# Give columns short names
names(mentors) <- c("timestamp", "contact", "carpentries", "unix", "git", "mercurial", "R", "Python", "Matlab", "SQL", "openrefine",
"cloudcomputing", "domain", "language", "underrepresented", "support", "pref_domain", "pref_language",
"pref_content", "pref_underrepresented", "pref_carpentries", "pref_region", "pref_local", "pref_comentor",
"timezone", "comments")
names(mentees) <- c("timestamp", "contact", "carpentries", "unix", "git", "mercurial", "R", "Python", "Matlab", "SQL", "openrefine",
"cloudcomputing", "domain", "language", "underrepresented", "support", "plans", "pref_domain", "pref_language",
"pref_content", "pref_underrepresented", "pref_carpentries", "pref_region", "pref_local", "timezone", "comments")
# Parse how plan to teach
mentees$plans <- as.factor(mentees$plans)
# Remove rows w/out contact info
#mentees <- mentees[-grep("^$", mentees$contact),]
#mentors <- mentors[-grep("^$", mentors$contact),]
mentees <- mentees[is.na(mentees$contact) == FALSE,]
mentors <- mentors[-is.na(mentors$contact) == FALSE,]
# Parse Carpentry affiliation
parse_carpentry = function(data) {
data$SWC <- grepl("Software Carpentry", data$carpentries)
data$DC <- grepl("Data Carpentry", data$carpentries)
data$LC <- grepl("Library Carpentry", data$carpentries)
data$carpentries <- NULL
data
}
# mentees = parse_carpentry(mentees)
# mentors = parse_carpentry(mentors)
# Parse teaching experience
parse_teaching = function(data) {
for(i in 1:nrow(data)) {
data[i, grep("I've taught this subject before and plan on teaching it again", data[i,])] = 2
data[i, grep("I could teach this subject with some preparation", data[i,])] = 1
data[i, grep("I'm not planning on teaching this subject", data[i,])] = 0
}
return(data)
}
# mentees = parse_teaching(mentees)
# mentors = parse_teaching(mentors)
# Parse domain of study
parse_domain = function(data) {
data$domain <- as.factor(data$domain)
data
}
# mentees = parse_domain(mentees)
# mentors = parse_domain(mentors)
# Parse human language
parse_language = function(data) {
data$english <- grepl(("English|english"), data$language)
data
}
# mentees = parse_language(mentees)
# mentors = parse_language(mentors)
# Parse types of support
parse_support = function(data) {
data$org_wkshp <- grepl("Logistics of organizing a workshop", data$support)
data$run_wkshp <- grepl("Logistics of running a workshop", data$support)
data$curr_dev <- grepl("Contributing to curriculum development or lesson maintanence", data$support)
data$teach_conf <- grepl("Developing confidence and skill in teaching", data$support)
data$carp_cult <- grepl("Understanding the Carpentry community and culture", data$support)
data$carp_net <- grepl("Networking with the Carpentry community", data$support)
data$other_net <- grepl("Networking with other communities", data$support)
data$carp_nav <- grepl("Navigating the Carpentries (communication channels)", data$support)
data$prep_teach <- grepl("Preparing for teaching specific lessons", data$support)
data$support <- NULL
return(data)
}
# mentees = parse_support(mentees)
# mentors = parse_support(mentors)
# Parse preferences
parse_preferences = function(data) {
for(i in 1:nrow(data)) {
data[i, grep("I strongly prefer not to be matched with someone who meets this criteria.", data[i,])] = -2
data[i, grep("I somewhat prefer not to be matched with someone who meets this criteria.", data[i,])] = -1
data[i, grep("I have no preference", data[i,])] = 0
data[i, grep("I somewhat prefer to be matched with someone who meets this criteria.", data[i,])] = 1
data[i, grep("I strongly prefer to be matched with someone who meets this criteria.", data[i,])] = 2
data[i, grep("I strongly prefer having a co-mentor", data[i,])] = 2
data[i, grep("I somewhat prefer having a co-mentor", data[i,])] = 1
data[i, grep("I somewhat prefer not having a co-mentor", data[i,])] = -1
# No entries match below text, throws error due to no matches
#    data[i, grep("I strongly prefer not having a co-mentor", data[i,])] -2
}
return(data)
}
# mentees = parse_preferences(mentees)
# mentors = parse_preferences(mentors)
# Parse timezone
parse_timezone = function(data) {
data$timezone <- gsub("UTC (\\+ [0-9]+|- [0-9]+).*", "\\1", data$timezone)
data$timezone <- gsub("UTC.*", "0", data$timezone)
data$timezone <- gsub(" ", "", data$timezone)
data$timezone <- as.numeric(data$timezone)
data
}
# mentees = parse_timezone(mentees)
# mentors = parse_timezone(mentors)
parse_data = function(data, outfile) {
data <- parse_carpentry(data)
data <- parse_teaching(data)
data <- parse_domain(data)
data <- parse_language(data)
data <- parse_support(data)
data <- parse_preferences(data)
data <- parse_timezone(data)
data$timestamp <- NULL
write.table(data, outfile, quote = FALSE, row.names = FALSE, sep = "\t", na = "NA")
data
}
mentees = parse_data(mentees, "/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/Mentoring/cleandata/mentees.tsv")
mentors = parse_data(mentors, "/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/Mentoring/cleandata/mentors.tsv")
################################################
### Form mentoring groups
################################################
# Add mentor/mentee status and combine
mentees$status <- "mentee"
mentors$status <- "mentor"
mentees$pref_comentor <- NA
mentors$plans <- NA
members = rbind(mentees, mentors)
#
names(members)
write.table(members, "/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/Mentoring/cleandata/members.tsv",
quote = FALSE, row.names = FALSE, sep = "\t", na = "NA")
# read in applications
applications = read.csv("Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/csvconf_applications/training_requests_no_duplicates.csv",
stringsAsFactors = FALSE)
applications = read.csv("Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/csvconf_applications/training_requests_no_duplicates.csv")
applications = read.csv("Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/csvconf_applications/test.csv")
head(Diamonds)
head(diamonds)
head(iris)
iris$Sepal.Length[1]
class(iris$Sepal.Length[1])
df[“Petal.Length”,2]
iris[“Petal.Length”,2]
iris["Petal.Length",2]
iris[2,"Petal.Length"]
iris[“Petal.Length”]$2
iris["Petal.Length"]$2
df = data.frame(Sepal.Length = c(5.1, 4.9, 4.6))
df
df = data.frame(Sepal.Length = c(5.1, 4.9, 4.6), Sepal.Width = c(3.5, 3.0, 3.1), Petal.Length = c(1.4,1.6, 1.5), Petal.Width = c(0.2, 0.3, 0.4))
df
df$Petal.Length[2,]
df[2,3]
df[3,2]
df["Petal.Length"$2]
df["Petal.Length"]$2
str(df)
df = data.frame(Sepal.Length = c(5.1, 4.9, 4.6), Sepal.Width = c(3.5, 3.0, 3.1), Petal.Length = factor(1.4,1.6, 1.5), Petal.Width = c(0.2, 0.3, 0.4))
df
str(df)
df$Petal.Length
df = data.frame(Sepal.Length = c(5.1, 4.9, 4.6), Sepal.Width = c(3.5, 3.0, 3.1), Petal.Length = c(1.4,1.6, 1.5), Petal.Width = c(0.2, 0.3, 0.4))
class(df)
class(df$Petal.Length)
str(df)
summary(df)
names(df)
row.names(df)
nrow(df)
summary(iris)
str(iris)
unique(iris$Species)
sum(iris$Species)
mean(iris$Species)
dim(df)
dim(df$Petal.Length)
length(df)
length(df$Petal.Length)
head(iris$Species)
tail(iris$Species)
setwd("Box Sync/digital-humanities-phylogenetics/data")
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$num_entries = rowSums(dtm_df)
plot(density(dtm_df$num_entries[1:nrow(dtm_df)-1])) #don't include sum of all entries across documents in density plot
table(dtm_df$num_entries[1:nrow(dtm_df)]) #number of documents with each number of entries
length(which(dtm_df$num_entries[1:nrow(dtm_df)] >= 10))
length(which(dtm_df$num_entries[1:nrow(dtm_df)] >= 100))
dtm_df["Total",] = colSums(dtm_df)
plot(density(unlist(dtm_df["Total", 1:ncol(dtm_df)-1])))
dtm_df["Total",which(dtm_df["Total",]>10)]
entry_frequency = unlist(dtm_df["Total", -"num_entries"])
dtm_df["Total",] = colSums(dtm_df)
entry_frequency = unlist(dtm_df["Total", 1:ncol(dtm_df)-1]) #don't include sum of all entries across documents
plot(density(entry_frequency))
dtm_df[entry_frequency > 10)]
dtm_df["Total",which(dtm_df["Total",]>10)]
common_entries = dtm_df["Total",which(dtm_df["Total",]>10)]
length(common_entries)
common_entries = which(entry_frequency > 10)
common_entries = which(entry_frequency >= 10)
length(common_entries)
summary(entry_frequency)
common_entries
common_entries = entry_frequency >= 10
common_entries
common_entries = entry_frequency[entry_frequency >= 10]
common_entries
class(entry_frequency)
common_entries = entry_frequency[which(entry_frequency >= 10)]
common_entries
class(common_entries)
head(common_entries)
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df[1:10,1:10]
dtm_df$num_entries = rowSums(dtm_df)
head(dtm_df$num_entries)
tail(dtm_df$num_entries)
which(dtm_df > 1)
clear
dtm_df$num_entries = rowSums(dtm_df)
tail(dtm_df)
tail(dtm_df$num_entries)
setwd("Box Sync/digital-humanities-phylogenetics/data")
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$num_entries = rowSums(dtm_df)
dtm_df["Total",] = colSums(dtm_df)
plot(density(dtm_df$num_entries[1:nrow(dtm_df)-1])) #don't include sum of all entries across documents in density plot
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$num_entries = rowSums(dtm_df)
View(dtm_df)
head(dtm_df[,1550:1559])
dtm_df["num_occurances",] = colSums(dtm_df)
dtm_df["num_occurances",10:20]
dtm_df["num_occurances",102:104]
dtm_df["num_occurances",102:1559]
dtm_df["num_occurances",1550:1559]
dtm_df["num_occurances","num_entries"] = NA
dtm_df["num_occurances",1550:1559]
plot(density(dtm_df$num_entries))
plot(density(dtm_df$num_entries, na.rm = TRUE))
table(dtm_df$num_entries) #number of documents with each number of entries
length(which(dtm_df$num_entries >= 10))
length(which(dtm_df$num_entries >= 100))
str(dtm_df)
tail(str(dtm_df))
entry_frequency = dtm_df["num_occurances",]
class(entry_frequency)
entry_frequency = dtm_df[["num_occurances",]]
entry_frequency = dtm_df[["num_occurances"]]
rm(entry_frequency)
entry_frequency = unlist(dtm_df["num_occurances",])
class(entry_frequency)
head(entry_frequency)
plot(density(entry_frequency))
plot(density(entry_frequency, na.rm = TRUE))
common_entries = entry_frequency[which(entry_frequency >= 10)]
length(common_entries)
common_entries
sum(dtm_df$al.hoe.n)
sum(ŋešnimbar.palm.n)
sum(dtm_df$ŋešnimbar.palm.n)
sum(dtm_df$ŋešnimbar.palm.n[1:103])
summary(entry_frequency)
test = dtm_df[1:10,1:10]
test
test = dtm_df[100:103,1:10]
test
sapply(test, function(x) which(test$x > 0))
View(test)
dtm_df$document = row.names(dtm_df)
View(dtm_df)
head(dtm_df$document)
ggplot(test, aes(document)) + geom_tile()
library(ggplot2)
ggplot(test, aes(document)) + geom_tile()
test = dtm_df[90:103,]
library(ggplot2)
ggplot(test, aes(document)) + geom_tile()
library(reshape)
melted_dtm_df = melt(dtm_df)
head(melted_dtm_df)
library(ggplot2)
ggplot(data = melted_dtm_df, aes(x=document, y=variable, fill=value)) +
geom_tile()
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile()
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 0.5))
library(ggplot2)
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1))
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))
library(ggplot2)
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[1:1000,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[1:10000,], aes(x=document, y=variable, fill=value)) +
geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
cormat <- round(cor(dtm_df),2)
head(cormat)
ggplot(data = melted_dtm_df[1:10000,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_discrete() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[1:10000,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[1:1000,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[1:100,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[162000:162136,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[162100:162136,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(reshape)
melted_dtm_df = melt(dtm_df[-"num_occurances",!"num_entries"])
library(reshape)
melted_dtm_df = melt(dtm_df[-"num_occurances",-"num_entries"])
melted_dtm_df = melt(dtm_df[-"num_occurances",])
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
melted_dtm_df = melt(dtm_df)
ggplot(data = melted_dtm_df[162100:162136,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$document = row.names(dtm_df)
library(reshape)
melted_dtm_df = melt(dtm_df)
library(ggplot2)
ggplot(data = melted_dtm_df[162100:162136,], aes(x=document, y=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_continuous() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[162100:162136,], aes(x=document, y=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[160000:160474,], aes(x=document, y=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[160000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile(col = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_dtm_df[150000:160474,], aes(y=document, x=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
qplot(data=melted_dtm_df[150000:160474,], x=variable,y=document, fill=factor(variable),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red"))
summary(melted_dtm_df)
max(melted_dtm_df$value)
melted_dtm_df[max(melted_dtm_df$value),]
melted_dtm_df[which(melted_dtm_df$value) == max(melted_dtm_df$value),]
melted_dtm_df[which(melted_dtm_df$value == max(melted_dtm_df$value)),]
melted_dtm_df = melt(dtm_df)
for(row in 1:nrow(melted_dtm_df)) {
if(melted_dtm_df$value >= 1) melted_dtm_df$value_bin = 1
else melted_dtm_df$value_bin = melted_dtm_df$value
}
warnings()
melted_dtm_df = melt(dtm_df)
for(row in 1:nrow(melted_dtm_df)) {
if(melted_dtm_df$value[row] >= 1) melted_dtm_df$value_bin[row] = 1
else melted_dtm_df$value_bin[row] = melted_dtm_df$value[row]
}
head(melted_dtm_df)
qplot(data=melted_dtm_df[150000:160474,], x=variable,y=document, fill=factor(variable),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red"))
qplot(data=melted_dtm_df[150000:160474,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red"))
qplot(data=melted_dtm_df[160000:160474,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red"))
qplot(data=melted_dtm_df[160000:160474,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
head(melted_dtm_df)
qplot(data=melted_dtm_df[156000:160474,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="blue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 1))
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="ltblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
View(dtm_df)
test = dtm_df[100:104, 10:30]
test
test = dtm_df[100:103, 10:30]
test
order(colSums(test))
test = test[,order(colSums(test))]
test
head(colSums(dtm_df))
colSums(dtm_df)
str(dtm_df)
class(dtm_df)
colSums(dtm_df, na.rm = TRUE)
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
head(colSums(dtm_df))
dtm_df = dtm_df[,order(colSums(dtm_df))]
head(colSums(dtm_df))
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
# currently "variables" (entries) are sorted alphabetically, would like sorted by frequency
dtm_df = dtm_df[,order(colSums(dtm_df), decreasing = TRUE)]
head(colSums(dtm_df))
dtm_df$num_entries = rowSums(dtm_df)
dtm_df["num_occurances",] = colSums(dtm_df)
dtm_df["num_occurances","num_entries"] = NA
plot(density(dtm_df$num_entries, na.rm = TRUE))
table(dtm_df$num_entries) #number of documents with each number of entries
length(which(dtm_df$num_entries >= 10))
length(which(dtm_df$num_entries >= 100))
entry_frequency = unlist(dtm_df["num_occurances",])
plot(density(entry_frequency, na.rm = TRUE))
common_entries = entry_frequency[which(entry_frequency >= 10)]
length(common_entries)
summary(entry_frequency)
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$document = row.names(dtm_df)
library(reshape)
melted_dtm_df = melt(dtm_df)
for(row in 1:nrow(melted_dtm_df)) {
if(melted_dtm_df$value[row] >= 1) melted_dtm_df$value_bin[row] = 1
else melted_dtm_df$value_bin[row] = melted_dtm_df$value[row]
}
library(reshape)
melted_dtm_df = melt(dtm_df)
for(row in 1:nrow(melted_dtm_df)) {
if(melted_dtm_df$value[row] >= 1) melted_dtm_df$value_bin[row] = 1
else melted_dtm_df$value_bin[row] = melted_dtm_df$value[row]
}
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
head(melted_dtm_df)
names(dtm_df)[1:10]
dtm_df = dtm_df[,order(colSums(dtm_df), decreasing = TRUE)]
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df = dtm_df[,order(colSums(dtm_df), decreasing = TRUE)]
dtm_df$num_entries = rowSums(dtm_df)
names(dtm_df)[1:10]
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
dtm_df$document = row.names(dtm_df)
# currently "variables" (entries) are sorted alphabetically, would like sorted by frequency
dtm_df = dtm_df[,order(colSums(dtm_df), decreasing = TRUE)]
dtm_df = read.table("dtm_df.csv", sep = ",", header = TRUE, row.names = 1)
# currently "variables" (entries) are sorted alphabetically, would like sorted by frequency
dtm_df = dtm_df[,order(colSums(dtm_df), decreasing = TRUE)]
dtm_df$document = row.names(dtm_df)
library(reshape)
melted_dtm_df = melt(dtm_df)
for(row in 1:nrow(melted_dtm_df)) {
if(melted_dtm_df$value[row] >= 1) melted_dtm_df$value_bin[row] = 1
else melted_dtm_df$value_bin[row] = melted_dtm_df$value[row]
}
qplot(data=melted_dtm_df, x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
qplot(data=melted_dtm_df[1:1000,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
warnings()
qplot(data=melted_dtm_df[1:1000,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5), axis.text.y = element_text(size = 5))
qplot(data=melted_dtm_df[1:100,], x=variable,y=document, fill=factor(value_bin),
geom="tile")+scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5), axis.text.y = element_text(size = 5))
head(melted_dtm_df)
melted_dtm_df[1:100]
melted_dtm_df[1:100,]
