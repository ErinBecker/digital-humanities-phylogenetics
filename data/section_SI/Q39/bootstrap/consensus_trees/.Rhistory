mail_certs(dc_instructors, "dc-instructor/")
mail_certs(swc_instructors, "swc-instructor/")
# Sends newly certified instructors their SWC and DC certificates.
# Make sure to update local certificates repo before running.
# For more details see: https://github.com/jennybc/send-email-with-r
# For adding an attachment see: https://cran.r-project.org/web/packages/gmailr/vignettes/sending_messages.html
# Read in file with email addresses and names of instructors certified since 1/1/17
dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/13/results.csv?api_key=b53f027922fce082075a859bc0a2fba8b20bb986", stringsAsFactors = FALSE)
swc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/14/results.csv?api_key=f29d1d3e2cb931f437a83d551444eb9b79f9b4c2", stringsAsFactors = FALSE)
# for FastTrack DC instructors
# dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/15/results.csv?api_key=muhbz0g7TJUBI66S0U1bC7ujnknkyRpP76faoLu7", stringsAsFactors = FALSE)
# # If your file has full names only and you want to use first names in email do:
# # Note: this only works if names are in the format "First Last"
separate_names = function(data) {
for(i in 1:nrow(data)) {
name = data[i, "person_name"] #put the column name that has full names in the quotes
data$first_name[i] = strsplit(name, " ")[[1]][1]
data$last_name[i] = paste0(strsplit(name, " ")[[1]][-1], collapse = " ")
}
data
}
dc_instructors = separate_names(dc_instructors)
swc_instructors = separate_names(swc_instructors)
# #Test file
# data = read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_certs.csv", stringsAsFactors = FALSE)
# data = separate_names(data)
# Select the date range to send certificates for
get_date_range = function(data, last_sent) {
data$awarded = as.Date(data$awarded)
last_sent = as.Date(last_sent)
today = Sys.Date()
#data = data[which(data$awarded < today & data$awarded > last_sent),]
data = data[which(data$awarded > last_sent),]
data
}
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_certs = function(data, carpentry) { # carpentry must be either "dc-instructor/" or "swc-instructor/"
for(i in 1:nrow(data)) {
name = paste0(data$first_name[i], ",")
address = data$person_email[i]
filename = data$filename[i]
to = address
from = "erinstellabecker@gmail.com"
subject = "Congratulations on becoming a Carpentry Instructor!"
body = paste("Hi", name, "\nThank you for completing your checkout. I've updated your status in our database and you are now officially certified as a Carpentry instructor. Your certificate is attached. Congratulations!\n
Please note that although your certificate reads either Software Carpentry or Data Carpentry you are fully certified to teach both Software and Data Carpentry workshops.
If you haven't already, please be sure to join the instructors mailing list (http://lists.software-carpentry.org/listinfo/instructors). This is where you'll hear about opportunities to teach at upcoming workshops. You can also join the general discussion list (http://lists.software-carpentry.org/listinfo/discuss) for broader interactions with the Carpentry community. In addition to being able to teach at Carpentry-organized workshops, you are also able to organize and host your own local workshops. You can find more information about running a workshop here: http://www.datacarpentry.org/self-organized-workshops/\n
If you would like to be included on our online list of instructors, please:
1.  Take a moment to update your profile at https://amy.software-carpentry.org/workshops/update_profile/ so we know where you are and what you're comfortable teaching.
2.  Send a three-line bio and a photo to instructorbio@carpentries.org to add to our team page at http://software-carpentry.org/team/.
Please let us know if there's anything we can do to help and welcome to the community!
Best,
Erin")
# Get attachment names
attachment = paste0("/Users/ebecker/Box\ Sync/Carpentry_repos/certification/", carpentry, filename, ".pdf")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
# Add attachments
if (file.exists(attachment)) {
msg %>% attach_file(attachment) -> msg
send_message(msg) }
}}
# Pull out instructors who were certified between last time run and today
prior_run = "2017-12-12" # UPDATE THIS!!
dc_instructors = get_date_range(dc_instructors, prior_run)
swc_instructors = get_date_range(swc_instructors, prior_run)
# ####### DO NOT RUN THESE TWO LINES UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_certs(dc_instructors, "dc-instructor/")
# mail_certs(swc_instructors, "swc-instructor/")
# Sends email to applicants for instructor training.
# Last mailed 11/27/17.
# For more details see: https://github.com/jennybc/send-email-with-r
# First download all training requests from AMY (no filters)
# To get the training requests, do "Requests/forms --> Training requests --> Download all requests as CSV"
# Read in applications from file downloaded from AMY
applicants <- read.csv("/Users/ebecker/Downloads/training_requests.csv", stringsAsFactors = FALSE)
# #Test
# applicants <- read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_applicants.csv", stringsAsFactors = FALSE)
# applicants$Matched.Trainee <- "—"
# Filter for Pending applications
applicants <- applicants[applicants$State == "Pending",]
# Filter for unmatched applications
applicants <- applicants[applicants$Matched.Trainee == "—",]
# Filter for applicants not affiliated with a Partnership
# This will need some adjusting as applicants enter various things in Group.Name
unaffiliated_tags = c("", "N/A", "n/a", "na", "NA", "None", "none", "Independent", "independent",
"unaffiliated", "Unaffiliated", "individual", "Individual")
applicants <- applicants[applicants$Group.Name %in% unaffiliated_tags,]
# Since date applied is not included in AMY output do a workaround
# Keep a record of every email address we've sent this message to and only send it email address is new
# Pull out people who are new applicants
previous_applicants_file = "/Users/ebecker/Box Sync/Carpentry_repos/carpentry-private-data/instructor-assessment/data/training-data/previous_TTT_applicants.txt"
previous_applicants = read.csv(previous_applicants_file)
applicants = applicants[!applicants$Email %in% previous_applicants$Email,]
# Add a line to filter for unique email addresses in the current batch
# people sometimes re-submit because they don't see a confirmation message
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_applicants = function(data) {
for (i in 1:nrow(data)) {
name = paste0(data$Personal[i], ",")
address = data$Email[i]
to = address
from = "ebecker@carpentries.org"
subject = "Thank you for your application to become a Data or Software Carpentry instructor"
body = paste("Hi", name, "\n\nThank you for applying for Software and Data Carpentry’s Instructor Training program. We’re excited to have you as part of our community.\n
If you submitted your application for a specific instructor training workshop, please disregard the message below.
We receive hundreds of applications, and we cannot provide no-cost training for every applicant. Please, don't let that discourage you! We'd like to help you bring workshops and instructor training to your organization. We’re working on ways to increase our capacity to offer trainings to individuals not affiliated with member institutions, and hope to be able to offer more of these trainings soon. Your application has been placed on our waiting list while we grow our capacity.
If you’d like to become a member, get in touch with memberships@carpentries.org to learn more about how we can help you make the case at your organization. In the meantime, please get involved!
- Join our discussion email list (http://lists.software-carpentry.org/listinfo/discuss)
- Follow us on Twitter (@datacarpentry and @swcarpentry)
- Contribute to lesson development (http://www.datacarpentry.org/involved-lessons/)
- Find a local workshop (http://www.datacarpentry.org/workshops-upcoming/ or https://software-carpentry.org/workshops/)
Learn more about us!
- Read our blogs (http://www.datacarpentry.org/blog/ and https://software-carpentry.org/blog/)
- Sign-up for our newsletter (https://tinyurl.com/mwn8ad3) and read past issues (https://tinyurl.com/kft7j7e)
Most of our instructor training events are offered as part of institutional memberships and Member organizations receive training priority. To fast-track your application, consider becoming a Member. For more information see: https://software-carpentry.org/scf/join/ and http://www.datacarpentry.org/partnerships/.
If you have questions about your application, please contact admin@datacarpentry.org. Thanks again for applying!
Best,
Erin Becker")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
send_message(msg)
# add email to previous_applicants
cat(paste0("\n", address), file = previous_applicants_file, append = TRUE)
}
}
######## DO NOT RUN THIS LINE UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_applicants(applicants)
# Sends email to applicants for instructor training.
# Last mailed 11/27/17.
# For more details see: https://github.com/jennybc/send-email-with-r
# First download all training requests from AMY (no filters)
# To get the training requests, do "Requests/forms --> Training requests --> Download all requests as CSV"
# Read in applications from file downloaded from AMY
applicants <- read.csv("/Users/ebecker/Downloads/training_requests.csv", stringsAsFactors = FALSE)
# #Test
# applicants <- read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_applicants.csv", stringsAsFactors = FALSE)
# applicants$Matched.Trainee <- "—"
# Filter for Pending applications
applicants <- applicants[applicants$State == "Pending",]
# Filter for unmatched applications
applicants <- applicants[applicants$Matched.Trainee == "—",]
# Filter for applicants not affiliated with a Partnership
# This will need some adjusting as applicants enter various things in Group.Name
unaffiliated_tags = c("", "N/A", "n/a", "na", "NA", "None", "none", "Independent", "independent",
"unaffiliated", "Unaffiliated", "individual", "Individual")
applicants <- applicants[applicants$Group.Name %in% unaffiliated_tags,]
# Since date applied is not included in AMY output do a workaround
# Keep a record of every email address we've sent this message to and only send it email address is new
# Pull out people who are new applicants
previous_applicants_file = "/Users/ebecker/Box Sync/Carpentry_repos/carpentry-private-data/instructor-assessment/data/training-data/previous_TTT_applicants.txt"
previous_applicants = read.csv(previous_applicants_file)
applicants = applicants[!applicants$Email %in% previous_applicants$Email,]
# Add a line to filter for unique email addresses in the current batch
# people sometimes re-submit because they don't see a confirmation message
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_applicants = function(data) {
for (i in 1:nrow(data)) {
name = paste0(data$Personal[i], ",")
address = data$Email[i]
to = address
from = "ebecker@carpentries.org"
subject = "Thank you for your application to become a Data or Software Carpentry instructor"
body = paste("Hi", name, "\n\nThank you for applying for Software and Data Carpentry’s Instructor Training program. We’re excited to have you as part of our community.\n
If you submitted your application for a specific instructor training workshop, please disregard the message below.
We receive hundreds of applications, and we cannot provide no-cost training for every applicant. Please, don't let that discourage you! We'd like to help you bring workshops and instructor training to your organization. We’re working on ways to increase our capacity to offer trainings to individuals not affiliated with member institutions, and hope to be able to offer more of these trainings soon. Your application has been placed on our waiting list while we grow our capacity.
If you’d like to become a member, get in touch with memberships@carpentries.org to learn more about how we can help you make the case at your organization. In the meantime, please get involved!
- Join our discussion email list (http://lists.software-carpentry.org/listinfo/discuss)
- Follow us on Twitter (@datacarpentry and @swcarpentry)
- Contribute to lesson development (http://www.datacarpentry.org/involved-lessons/)
- Find a local workshop (http://www.datacarpentry.org/workshops-upcoming/ or https://software-carpentry.org/workshops/)
Learn more about us!
- Read our blogs (http://www.datacarpentry.org/blog/ and https://software-carpentry.org/blog/)
- Sign-up for our newsletter (https://tinyurl.com/mwn8ad3) and read past issues (https://tinyurl.com/kft7j7e)
Most of our instructor training events are offered as part of institutional memberships and Member organizations receive training priority. To fast-track your application, consider becoming a Member. For more information see: https://software-carpentry.org/scf/join/ and http://www.datacarpentry.org/partnerships/.
If you have questions about your application, please contact admin@datacarpentry.org. Thanks again for applying!
Best,
Erin Becker")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
send_message(msg)
# add email to previous_applicants
cat(paste0("\n", address), file = previous_applicants_file, append = TRUE)
}
}
######## DO NOT RUN THIS LINE UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_applicants(applicants)
####### DO NOT RUN THIS LINE UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
mail_applicants(applicants)
read.tree("Box Sync/digital-humanities-phylogenetics/data/section_SI/bootstrap/consensus_trees/avg_tree.tre")
library(agp)
library(ape)
read.tree("Box Sync/digital-humanities-phylogenetics/data/section_SI/bootstrap/consensus_trees/avg_tree.tre")
ggtree(avg_tree) + geom_tiplab()
library(ggtree)
ggtree(avg_tree) + geom_tiplab()
avg_tree = read.tree("Box Sync/digital-humanities-phylogenetics/data/section_SI/bootstrap/consensus_trees/avg_tree.tre")
ggtree(avg_tree) + geom_tiplab()
pdf("Box Sync/digital-humanities-phylogenetics/data/section_SI/bootstrap/consensus_trees/avg_tree.pdf")
ggtree(avg_tree) + geom_tiplab()
dev.off()
ggtree(avg_tree) + geom_tiplab()
# Sends email to applicants for instructor training.
# Last mailed 12/12/17.
# For more details see: https://github.com/jennybc/send-email-with-r
# First download all training requests from AMY (no filters)
# To get the training requests, do "Requests/forms --> Training requests --> Download all requests as CSV"
# Read in applications from file downloaded from AMY
applicants <- read.csv("/Users/ebecker/Downloads/training_requests.csv", stringsAsFactors = FALSE)
# #Test
# applicants <- read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_applicants.csv", stringsAsFactors = FALSE)
# applicants$Matched.Trainee <- "—"
# Filter for Pending applications
applicants <- applicants[applicants$State == "Pending",]
# Filter for unmatched applications
applicants <- applicants[applicants$Matched.Trainee == "—",]
# Filter for applicants not affiliated with a Partnership
# This will need some adjusting as applicants enter various things in Group.Name
unaffiliated_tags = c("", "N/A", "n/a", "na", "NA", "None", "none", "Independent", "independent",
"unaffiliated", "Unaffiliated", "individual", "Individual")
applicants <- applicants[applicants$Group.Name %in% unaffiliated_tags,]
# Since date applied is not included in AMY output do a workaround
# Keep a record of every email address we've sent this message to and only send it email address is new
# Pull out people who are new applicants
previous_applicants_file = "/Users/ebecker/Box Sync/Carpentry_repos/carpentry-private-data/instructor-assessment/data/training-data/previous_TTT_applicants.txt"
previous_applicants = read.csv(previous_applicants_file)
applicants = applicants[!applicants$Email %in% previous_applicants$Email,]
# Add a line to filter for unique email addresses in the current batch
# people sometimes re-submit because they don't see a confirmation message
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_applicants = function(data) {
for (i in 1:nrow(data)) {
name = paste0(data$Personal[i], ",")
address = data$Email[i]
to = address
from = "ebecker@carpentries.org"
subject = "Thank you for your application to become a Data or Software Carpentry instructor"
body = paste("Hi", name, "\n\nThank you for applying for Software and Data Carpentry’s Instructor Training program. We’re excited to have you as part of our community.\n
If you submitted your application for a specific instructor training workshop, please disregard the message below.
We receive hundreds of applications, and we cannot provide no-cost training for every applicant. Please, don't let that discourage you! We'd like to help you bring workshops and instructor training to your organization. We’re working on ways to increase our capacity to offer trainings to individuals not affiliated with member institutions, and hope to be able to offer more of these trainings soon. Your application has been placed on our waiting list while we grow our capacity.
If you’d like to become a member, get in touch with memberships@carpentries.org to learn more about how we can help you make the case at your organization. In the meantime, please get involved!
- Join our discussion email list (http://lists.software-carpentry.org/listinfo/discuss)
- Follow us on Twitter (@datacarpentry and @swcarpentry)
- Contribute to lesson development (http://www.datacarpentry.org/involved-lessons/)
- Find a local workshop (http://www.datacarpentry.org/workshops-upcoming/ or https://software-carpentry.org/workshops/)
Learn more about us!
- Read our blogs (http://www.datacarpentry.org/blog/ and https://software-carpentry.org/blog/)
- Sign-up for our newsletter (https://tinyurl.com/mwn8ad3) and read past issues (https://tinyurl.com/kft7j7e)
Most of our instructor training events are offered as part of institutional memberships and Member organizations receive training priority. To fast-track your application, consider becoming a Member. For more information see: https://software-carpentry.org/scf/join/ and http://www.datacarpentry.org/partnerships/.
If you have questions about your application, please contact admin@datacarpentry.org. Thanks again for applying!
Best,
Erin Becker")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
send_message(msg)
# add email to previous_applicants
cat(paste0("\n", address), file = previous_applicants_file, append = TRUE)
}
}
# ####### DO NOT RUN THIS LINE UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_applicants(applicants)
# Sends newly certified instructors their SWC and DC certificates.
# Make sure to update local certificates repo before running.
# For more details see: https://github.com/jennybc/send-email-with-r
# For adding an attachment see: https://cran.r-project.org/web/packages/gmailr/vignettes/sending_messages.html
# Read in file with email addresses and names of instructors certified since 1/1/17
dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/13/results.csv?api_key=b53f027922fce082075a859bc0a2fba8b20bb986", stringsAsFactors = FALSE)
swc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/14/results.csv?api_key=f29d1d3e2cb931f437a83d551444eb9b79f9b4c2", stringsAsFactors = FALSE)
# for FastTrack DC instructors
# dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/15/results.csv?api_key=muhbz0g7TJUBI66S0U1bC7ujnknkyRpP76faoLu7", stringsAsFactors = FALSE)
# # If your file has full names only and you want to use first names in email do:
# # Note: this only works if names are in the format "First Last"
separate_names = function(data) {
for(i in 1:nrow(data)) {
name = data[i, "person_name"] #put the column name that has full names in the quotes
data$first_name[i] = strsplit(name, " ")[[1]][1]
data$last_name[i] = paste0(strsplit(name, " ")[[1]][-1], collapse = " ")
}
data
}
dc_instructors = separate_names(dc_instructors)
swc_instructors = separate_names(swc_instructors)
# #Test file
# data = read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_certs.csv", stringsAsFactors = FALSE)
# data = separate_names(data)
# Select the date range to send certificates for
get_date_range = function(data, last_sent) {
data$awarded = as.Date(data$awarded)
last_sent = as.Date(last_sent)
today = Sys.Date()
#data = data[which(data$awarded < today & data$awarded > last_sent),]
data = data[which(data$awarded > last_sent),]
data
}
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_certs = function(data, carpentry) { # carpentry must be either "dc-instructor/" or "swc-instructor/"
for(i in 1:nrow(data)) {
name = paste0(data$first_name[i], ",")
address = data$person_email[i]
filename = data$filename[i]
to = address
from = "erinstellabecker@gmail.com"
subject = "Congratulations on becoming a Carpentry Instructor!"
body = paste("Hi", name, "\nThank you for completing your checkout. I've updated your status in our database and you are now officially certified as a Carpentry instructor. Your certificate is attached. Congratulations!\n
Please note that although your certificate reads either Software Carpentry or Data Carpentry you are fully certified to teach both Software and Data Carpentry workshops.
If you haven't already, please be sure to join the instructors mailing list (http://lists.software-carpentry.org/listinfo/instructors). This is where you'll hear about opportunities to teach at upcoming workshops. You can also join the general discussion list (http://lists.software-carpentry.org/listinfo/discuss) for broader interactions with the Carpentry community. In addition to being able to teach at Carpentry-organized workshops, you are also able to organize and host your own local workshops. You can find more information about running a workshop here: http://www.datacarpentry.org/self-organized-workshops/\n
If you would like to be included on our online list of instructors, please:
1.  Take a moment to update your profile at https://amy.software-carpentry.org/workshops/update_profile/ so we know where you are and what you're comfortable teaching.
2.  Send a three-line bio and a photo to instructorbio@carpentries.org to add to our team page at http://software-carpentry.org/team/.
Please let us know if there's anything we can do to help and welcome to the community!
Best,
Erin")
# Get attachment names
attachment = paste0("/Users/ebecker/Box\ Sync/Carpentry_repos/certification/", carpentry, filename, ".pdf")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
# Add attachments
if (file.exists(attachment)) {
msg %>% attach_file(attachment) -> msg
send_message(msg) }
}}
# Pull out instructors who were certified between last time run and today
prior_run = "2017-12-12" # UPDATE THIS!!
dc_instructors = get_date_range(dc_instructors, prior_run)
swc_instructors = get_date_range(swc_instructors, prior_run)
# ####### DO NOT RUN THESE TWO LINES UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_certs(dc_instructors, "dc-instructor/")
# mail_certs(swc_instructors, "swc-instructor/")
# Sends newly certified instructors their SWC and DC certificates.
# Make sure to update local certificates repo before running.
# For more details see: https://github.com/jennybc/send-email-with-r
# For adding an attachment see: https://cran.r-project.org/web/packages/gmailr/vignettes/sending_messages.html
# Read in file with email addresses and names of instructors certified since 1/1/17
dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/13/results.csv?api_key=b53f027922fce082075a859bc0a2fba8b20bb986", stringsAsFactors = FALSE)
swc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/14/results.csv?api_key=f29d1d3e2cb931f437a83d551444eb9b79f9b4c2", stringsAsFactors = FALSE)
# for FastTrack DC instructors
# dc_instructors <- read.csv("https://data.softwarecarpentry.org/api/queries/15/results.csv?api_key=muhbz0g7TJUBI66S0U1bC7ujnknkyRpP76faoLu7", stringsAsFactors = FALSE)
# # If your file has full names only and you want to use first names in email do:
# # Note: this only works if names are in the format "First Last"
separate_names = function(data) {
for(i in 1:nrow(data)) {
name = data[i, "person_name"] #put the column name that has full names in the quotes
data$first_name[i] = strsplit(name, " ")[[1]][1]
data$last_name[i] = paste0(strsplit(name, " ")[[1]][-1], collapse = " ")
}
data
}
dc_instructors = separate_names(dc_instructors)
swc_instructors = separate_names(swc_instructors)
# #Test file
# data = read.csv("/Users/ebecker/Google Drive (erinstellabecker@gmail.com)/SWC-DC/InstructorTraining/Strategy_for_instructor_training/Email-scripts/test_certs.csv", stringsAsFactors = FALSE)
# data = separate_names(data)
# Select the date range to send certificates for
get_date_range = function(data, last_sent) {
data$awarded = as.Date(data$awarded)
last_sent = as.Date(last_sent)
today = Sys.Date()
#data = data[which(data$awarded < today & data$awarded > last_sent),]
data = data[which(data$awarded > last_sent),]
data
}
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
mail_certs = function(data, carpentry) { # carpentry must be either "dc-instructor/" or "swc-instructor/"
for(i in 1:nrow(data)) {
name = paste0(data$first_name[i], ",")
address = data$person_email[i]
filename = data$filename[i]
to = address
from = "erinstellabecker@gmail.com"
subject = "Congratulations on becoming a Carpentry Instructor!"
body = paste("Hi", name, "\nThank you for completing your checkout. I've updated your status in our database and you are now officially certified as a Carpentry instructor. Your certificate is attached. Congratulations!\n
Please note that although your certificate reads either Software Carpentry or Data Carpentry you are fully certified to teach both Software and Data Carpentry workshops.
If you haven't already, please be sure to join the instructors mailing list (http://lists.software-carpentry.org/listinfo/instructors). This is where you'll hear about opportunities to teach at upcoming workshops. You can also join the general discussion list (http://lists.software-carpentry.org/listinfo/discuss) for broader interactions with the Carpentry community. In addition to being able to teach at Carpentry-organized workshops, you are also able to organize and host your own local workshops. You can find more information about running a workshop here: http://www.datacarpentry.org/self-organized-workshops/\n
If you would like to be included on our online list of instructors, please:
1.  Take a moment to update your profile at https://amy.software-carpentry.org/workshops/update_profile/ so we know where you are and what you're comfortable teaching.
2.  Send a three-line bio and a photo to instructorbio@carpentries.org to add to our team page at http://software-carpentry.org/team/.
Please let us know if there's anything we can do to help and welcome to the community!
Best,
Erin")
# Get attachment names
attachment = paste0("/Users/ebecker/Box\ Sync/Carpentry_repos/certification/", carpentry, filename, ".pdf")
# Construct message
mime() %>%
from(from) %>%
to(to) %>%
subject(subject) %>%
html_body(body) %>%
attach_part(body) -> msg
# Add attachments
if (file.exists(attachment)) {
msg %>% attach_file(attachment) -> msg
send_message(msg) }
}}
# Pull out instructors who were certified between last time run and today
prior_run = "2017-12-12" # UPDATE THIS!!
dc_instructors = get_date_range(dc_instructors, prior_run)
swc_instructors = get_date_range(swc_instructors, prior_run)
# ####### DO NOT RUN THESE TWO LINES UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
# mail_certs(dc_instructors, "dc-instructor/")
# mail_certs(swc_instructors, "swc-instructor/")
View(swc_instructors)
####### DO NOT RUN THESE TWO LINES UNTIL YOU'VE TESTED THOUROUGHLY!!!!####
mail_certs(dc_instructors, "dc-instructor/")
mail_certs(swc_instructors, "swc-instructor/")
library(ggtree)
setwd("Box Sync/digital-humanities-phylogenetics/data/section_SI/bootstrap/consensus_trees/")
tree = read.tree("mcc_tree.tre")
ggtree(tree, color = "firebrick", size = 1, linetype = "dotted")
ggtree(tree)
ggtree(tree, ladderize=FALSE)
ggtree(tree, branch.length="none")
ggtree(tree, branch.length=0.5)
ggtree(tree, branch.length=3)
ggtree(tree, branch.length=30)
ggtree(tree, layout = "slanted")
ggtree(tree, layout = "fan")
ggtree(tree, layout = "circular")
ggtree(tree, layout = "radial")
ggtree(tree, layout = "equal_angle")
ggtree(tree, layout = "daylight")
ggtree(tree, layout = "unrooted")
ggtree(tree, layout = "unrooted")
ggtree(tree, layout = "unrooted")
ggtree(tree) + ggtitle("(Phylogram) rectangular layout")
ggtree(tree, layout="unrooted") + ggtitle("unrooted layout")
ggtree(tree2d, mrsd = "2014-05-01") + theme_tree2()
ggtree(tree, mrsd = "2014-05-01") + theme_tree2()
ggtree(tree) + theme_tree2()
ggtree(tree)+geom_treescale(x=0, y=12, width=6, color='red')
ggtree(tree) + geom_treescale(width=6, color='red')
ggtree(tree) + geom_treescale(width = 6, color='red')
ggtree(tree) + geom_treescale(width = 0.5, color='red')
ggtree(tree) + geom_treescale(width = 3, color='red')
ggtree(tree) + geom_treescale(width = 3, color='red', offset = 2)
ggtree(tree) + geom_treescale(width = 3, color='red', offset = 1)
ggtree(tree) + geom_treescale(width = 3,
color='red', offset = 1
fontsize = 0.5)
ggtree(tree) + geom_treescale(width = 3,
color='red', offset = 1
fontsize = 0.5)
ggtree(tree) + geom_treescale(width = 3,
color='red', offset = 1,
fontsize = 0.5)
ggtree(tree) + geom_treescale(width = 3,
color='red', offset = 1,
fontsize = 12)
ggtree(tree) + geom_treescale(width = 3,
color='red', offset = 1,
fontsize = 4)
ggtree(tree) + geom_tippoint(color="#FDAC4F", shape=8, size=3)
ggtree(tree) + geom_tiplab(size=3, color="purple")
ggtree(tree) + geom_tiplab(size=3, color="purple") +
geom_tippoint(color="#FDAC4F", shape=8, size=3)
ggtree(tree) + geom_tiplab(size=3, color="purple")
ggtree(tree) + geom_tiplab(aes(x=branch), size=3, color="purple", vjust=-0.3)
multiplot(
ggtree(tree, color="red") + theme_tree("steelblue"),
ggtree(tree, color="white") + theme_tree("black"),
ncol=2)
library("ape")
data(chiroptera)
gzoom(chiroptera, grep("Plecotus", chiroptera$tip.label))
data(tree)
gzoom(tree, grep("Q", tree$tip.labl))
gzoom(chiroptera, grep("Plecotus", chiroptera$tip.label))
gzoom(chiroptera, grep("Paranyctimene", chiroptera$tip.label))
gzoom(chiroptera, grep("Para", chiroptera$tip.label))
head(chiroptera$tip.label)
gzoom(chiroptera, grep("Nyctimene", chiroptera$tip.label))
tail(chiroptera$tip.label)
ggzoom(chiroptera, grep("Myotis", chiroptera$tip.label))
gzoom(chiroptera, grep("Myotis", chiroptera$tip.label))
gzoom(chiroptera, grep("Myotis_f", chiroptera$tip.label))
gzoom(chiroptera, grep("Myotis", chiroptera$tip.label))
