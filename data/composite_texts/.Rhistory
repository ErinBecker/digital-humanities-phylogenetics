guidewords_b = get_guidewords(line_b)
citation_form_b = get_citation_forms(line_b)
line_a_clean = clean_kmer(line_a)
line_b_clean = clean_kmer(line_b)
kmer = getLongestCommonSubstring(c(line_a_clean, line_b_clean))
kmer = gsub("[\x80-\xFF]", "", kmer) # get rid of multibyte strings introduced by Rlibstree
k = nchar(kmer)
if (length(kmer) == 0) {
kmer = NA
k = 0 }
overlap = sum(citation_form_a %in% citation_form_b) + sum(guidewords_a %in% guidewords_b)
df_compare$line_a[i] = line_a
df_compare$line_b[i] = line_b
df_compare$overlap[i] = overlap
df_compare$kmer[i] = kmer
df_compare$k[i] = k
}
plot(df_compare$overlap, pch = ".", main = name, ylab = "# matching words", xlab = "line number")
df_compare = def_section_breaks(df_compare, cutoff = cutoff)
plot(table(df_compare$section), main = name, ylab = "# entries in section", xlab = "section")
#  extract_sections(df_compare, outfile)
df_compare
}
####### Get section members and write to file #######
#
Q1 = compare_entries("Q000001.csv", cutoff = 3, "Q000001_sections.csv")
Q39 = compare_entries("Q000039.csv", cutoff = 3, "Q000039_sections.csv")
Q40 = compare_entries("Q000040.csv", cutoff = 3, "Q000040_sections.csv")
Q41 = compare_entries("Q000041.csv", cutoff = 3, "Q000041_sections.csv")
Q42 = compare_entries("Q000042.csv", cutoff = 3, "Q000042_sections.csv")
######################################################
####### Read in section definitions from file #######
Q1_sections = read.csv("Q000001_sections.csv")
Q39_sections = read.csv("Q000039_sections.csv")
Q40_sections = read.csv("Q000040_sections.csv")
Q41_sections = read.csv("Q000040_sections.csv")
Q42_sections = read.csv("Q000042_sections.csv")
####### Read in documents dealing with trees and wooden objects #######
# Things to check:
# kmer length is not reproducible
# Best to do kmer matching after spliting English and Sumerian (not allow matching over language boundaries)
# some kmers include "na" from NA (eg "{ŋeš}uri[na]na" "{ŋeš}uri[na]na" "ŋešurina")
View(Q39_sections)
View(Q39)
View(Q40_sections)
View(Q41_sections)
View(Q42_sections)
View(Q42_sections)
View(Q42)
View(Q42_sections)
Q1_sections = read.csv("Q000001_sections.csv")
Q39_sections = read.csv("Q000039_sections.csv")
Q40_sections = read.csv("Q000040_sections.csv")
Q41_sections = read.csv("Q000040_sections.csv")
Q42_sections = read.csv("Q000042_sections.csv")
read.csv("../ob_lists_wood.csv")
dtm_df = read.csv("../ob_lists_wood.csv")
wood_df = read.csv("../ob_lists_wood.csv")
View(wood_df)
wood_df$X = NULL
str(wood_df)
# Use getLongestCommonSubstring() from Rlibstree
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rlibstree")
# Needs bioconductor and having difficulty installing on Jupyter notebook
# Want to test and make sure it works before I go through all the trouble
setwd("/Users/ebecker/Box Sync/digital-humanities-phylogenetics/data/composite_texts/")
library(Rlibstree)
## Functions
get_guidewords = function(line) {
# extract all guidewords for an entry into character vector
line = unlist(strsplit(line, "_"))
line = gsub(".*\\[", "", line)
line = gsub("\\].*", "", line)
line = gsub("~", "", line)
guidewords = line
guidewords = guidewords[which(guidewords != "na")]
guidewords
}
get_citation_forms = function(line) {
# extract all citation forms for an entry into character vector
line = unlist(strsplit(line, "_"))
line = gsub("(.*)\\[.*", "\\1", line)
citation_form = line
citation_form = citation_form[which(citation_form != "na")]
citation_form
}
clean_kmer = function(x) {
# get rid of part of speech (follows each ])
#  x = gsub("(\\])[a-zA-Z/]*_", paste0("\\1", "_"), x) #for all but last word
x = gsub("(\\])[a-zA-Z/]*", "\\1", x) #for all but last word
#  x = gsub("(_.*\\])[a-zA-Z/]*", "\\1", x) #for last word
# get rid of punctuation (but only {}[]_.)
x = gsub("\\]", "", x)
x = gsub("\\[", "", x)
x = gsub("\\{", "", x)
x = gsub("\\}", "", x)
x = gsub("_", "", x)
x = gsub("\\.", "", x)
x = gsub("~", "", x)
x
}
def_section_breaks = function(df, cutoff) {
# a section ends anytime overlap is zero and k is below the defined cutoff
df$section = NA
sect_num = 1
first_section_start = which(df$overlap > 0 | df$k >= cutoff)[1]
df$section[first_section_start] = sect_num
section_break = FALSE
for (i in (first_section_start):nrow(df)) {
if (df$overlap[i] > 0 | df$k[i] >= cutoff) {
if (section_break == TRUE) { sect_num = sect_num + 1 }
df$section[i] = sect_num
section_break = FALSE
}
else {
df$section[i] = NA
section_break = TRUE
}}
df
}
extract_sections = function(df, file) {
# writes all entries present in each section to a file
section_nums = unique(df$section[!is.na(df$section)])
sections = data.frame(sapply(section_nums, function(x) x = character(max(table(df$section)) + 1)))
for (i in section_nums) {
elements = unique(c(df[which(df$section == i),]$line_a, df[which(df$section == i),]$line_b))
missing = max(table(df$section) + 1) - length(elements)
elements = c(elements, rep(NA, missing))
sections[,i] = elements
colnames(sections)[i] = paste(get_guidewords(sections[1,i]), collapse = "_")
}
write.csv(sections, file, row.names = FALSE, quote = FALSE)
}
compare_entries = function(infile, cutoff, outfile) {
name = strsplit(infile, "\\.")[[1]][1]
df_composite = read.csv(infile, stringsAsFactors = FALSE)
# remove lines in df representing missing lines or sections
empty_lines = which(df_composite$entry == "")
if (length(empty_lines) != 0) {df_composite = df_composite[-empty_lines,] }
# initialize empty data frame for storing results
num_rows = nrow(df_composite) - 1
df_compare = data.frame(line_a = character(num_rows),
line_b = character(num_rows),
overlap = numeric(num_rows),
kmer = character(num_rows),
k = numeric(num_rows),
stringsAsFactors = FALSE)
for (i in 1:nrow(df_composite) - 1) {
line_a = tolower(df_composite$entry[i])
guidewords_a = get_guidewords(line_a)
citation_form_a = get_citation_forms(line_a)
line_b = tolower(df_composite$entry[i + 1])
guidewords_b = get_guidewords(line_b)
citation_form_b = get_citation_forms(line_b)
line_a_clean = clean_kmer(line_a)
line_b_clean = clean_kmer(line_b)
kmer = getLongestCommonSubstring(c(line_a_clean, line_b_clean))
kmer = gsub("[\x80-\xFF]", "", kmer) # get rid of multibyte strings introduced by Rlibstree
k = nchar(kmer)
if (length(kmer) == 0) {
kmer = NA
k = 0 }
overlap = sum(citation_form_a %in% citation_form_b) + sum(guidewords_a %in% guidewords_b)
df_compare$line_a[i] = line_a
df_compare$line_b[i] = line_b
df_compare$overlap[i] = overlap
df_compare$kmer[i] = kmer
df_compare$k[i] = k
}
plot(df_compare$overlap, pch = ".", main = name, ylab = "# matching words", xlab = "line number")
df_compare = def_section_breaks(df_compare, cutoff = cutoff)
plot(table(df_compare$section), main = name, ylab = "# entries in section", xlab = "section")
#  extract_sections(df_compare, outfile)
df_compare
}
Q1 = compare_entries("Q000001.csv", cutoff = 3, "Q000001_sections.csv")
Q39 = compare_entries("Q000039.csv", cutoff = 3, "Q000039_sections.csv")
Q40 = compare_entries("Q000040.csv", cutoff = 3, "Q000040_sections.csv")
Q41 = compare_entries("Q000041.csv", cutoff = 3, "Q000041_sections.csv")
Q42 = compare_entries("Q000042.csv", cutoff = 3, "Q000042_sections.csv")
View(Q1)
View(Q1)
head(wood_df)
wood_df = read.csv("../ob_lists_wood_w_id_text.csv")
wood_df$X = NULL
ob_lists_wood_w_id_text = read.csv("../ob_lists_wood_w_id_text.csv")
ob_lists_wood_w_id_text$X = NULL
head(ob_lists_wood_w_id_text)
doc_list = unique(id_text)
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(section_names)))
colnames(Q39_sections)
ob_lists_wood_w_id_text = read.csv("../ob_lists_wood_w_id_text.csv")
ob_lists_wood_w_id_text$X = NULL
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_names = colnames(Q39_sections)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(section_names)))
ob_lists_wood_w_id_text = read.csv("../ob_lists_wood_w_id_text.csv")
ob_lists_wood_w_id_text$X = NULL
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_names = colnames(Q39_sections)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))))
View(section_matrix)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))), row.names = section_names)
View(section_matrix)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))), row.names = section_names)
colnames(section_matrix) = doc_list
View(section_matrix)
View(section_matrix)
Q39_sections = read.csv("Q000039_sections.csv")
ob_lists_wood_w_id_text = read.csv("../ob_lists_wood_w_id_text.csv")
ob_lists_wood_w_id_text$X = NULL
# make df to store results
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_names = colnames(Q39_sections)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))), row.names = section_names)
colnames(section_matrix) = doc_list
View(section_matrix)
View(Q39_sections)
ncol(Q39_sections)
View(section_matrix)
View(section_matrix)
head(doc_list)
test = "P117395"
doc = "P117395"
as.character(colnames(section_matrix)) = doc_list
character(colnames(section_matrix)) = doc_list
colnames(section_matrix) = doc_list
doc_list = character(doc_list)
doc_list = as.character(doc_list)
length(which(ob_lists_wood_w_id_text$id_text == "P117395"))
P117395 = ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == "P117395"),]
View(P117395)
P117395 = ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == "P117395"),]$entry
P117395
P117395 = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == "P117395"),]$entry)
P117395
P117395 %in% Q39_sections[,1]
P117395 %in% Q39_sections[,2]
j = unique(doc_list)[1]
j
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
entries
j = doc
j
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections[1:3])) {
entries %i% Q39_sections[,i]
}
for (i in 1:ncol(Q39_sections[1:3])) {
entries %in% Q39_sections[,i]
}
entries %in% Q39_sections[,1]
entries %in% Q39_sections[,2]
entries %in% Q39_sections[,3]
sum(entries %in% Q39_sections[,3])
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections[1:3])) {
print(sum(entries %in% Q39_sections[,i]))
}
for (i in 1:ncol(Q39_sections)) {
print(sum(entries %in% Q39_sections[,i]))
}
entries
View(section_matrix)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(entries %in% Q39_sections[,i])
section_matrix[i, j] = presence
}
section_matrix
}
View(section_matrix)
str(Q39_sections)
Q39_sections = read.csv("Q000039_sections.csv", stringsAsFactors = FALSE)
ob_lists_wood_w_id_text = read.csv("../ob_lists_wood_w_id_text.csv")
ob_lists_wood_w_id_text$X = NULL
# make df to store results
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_names = colnames(Q39_sections)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))), row.names = section_names)
colnames(section_matrix) = doc_list
doc_list = as.character(doc_list)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(entries %in% Q39_sections[,i])
section_matrix[i, j] = presence
}
section_matrix
}
View(Q39_sections)
View(section_matrix)
sum(section_matrix$P117395)
sum(section_matrix$P117404)
View(Q39_sections)
j = doc_list[1]
j
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
entries
ncol(Q39_sections)
Q39_sections[,1]
View(Q39_sections)
entries = "ŋeš[tree]n_giggi[black]v/i"
entries
presence = sum(entries %in% Q39_sections[,1])
presence
entries %in% Q39_sections[,1]
entries
class(entries)
class(Q39_sections[,1])
test = c("bob", "tom", "tim")
test2 = "tom"
test2 %in% test
test %in% test2
sum(test %in% test2)
entries = ""ŋeš[tree]n_giggi[black]v/i""
entries = "ŋeš[tree]n_giggi[black]v/i"
entries %in% Q39_sections[,1]
entries %in% unlist(Q39_sections[,1])
Q39_sections[,1] %in% entries
sum(Q39_sections[,1] %in% entries)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% entries)
section_matrix[i, j] = presence
}
section_matrix
}
View(section_matrix)
sum(section_matrix$P117395)
sum(section_matrix$P117404)
sapply(section_matrix, sum)
section_matrix[1, 1] = 10
View(section_matrix)
section_matrix[1, doc] = 10
section_matrix[1, doc] = 11
View(section_matrix)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% entries)
section_matrix[i, j] = 11
}
section_matrix
}
View(section_matrix)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% entries)
section_matrix[i, j] = presence
}
section_matrix
}
Q39_sections[1,1]
head(Q39_sections[,1:10])
View(ob_lists_wood_w_id_text)
View(ob_lists_wood_w_id_text)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% tolower(entries))
section_matrix[i, j] = presence
}
section_matrix
}
View(section_matrix)
sapply(section_matrix, sum)
View(section_matrix)
install.packages("reshape")
library(reshape)
melted_df = melt(section_matrix)
head(melted_df)
library(ggplot2)
library(ggplot2)
ggplot(data = melted_df, aes(y=document, x=variable, fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
head(melted_df)
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
View(melted_df)
head(section_matrix)
plot.data.frame(section_matrix)
plot(section_matrix)
ggplot(section_matrix)
View(melted_df)
section_matrix$section_name = row.names(section_matrix)
View(section_matrix)
head(section_matrix)
melted_df = melt(section_matrix)
head(melted_df)
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = section_name)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
plot(c(1:10))
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
head(melted_df)
ggplot(c(1:10))
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
# Fixed values
p + geom_vline(xintercept = 5)
unique(section_matrix)
length(which(is.na(section_matrix) == TRUE))
library(ggplot2)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
# Fixed values
p + geom_vline(xintercept = 5)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = "red")) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) + geom_bar()
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) + geom_tile()
ggplot(data = melted_df, aes(y = variable, x = section_name)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
unique(melted_df$value)
head(melted_df)
for (i in 1:nrow(melted_df)) {
if(melted_df$value[i] > 0) melted_df$value[i] = 1
}
unique(melted_df$value)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = "red")) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = factor(value))) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
qplot(data = melted_df, x = section_name, y = variable, fill = factor(value),
geom = "tile") + scale_fill_manual(values=c("0"="lightblue", "1"="red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 1), axis.text.y = element_text(size = 3))
unique(factor(melted_df$value))
str(faithfuld)
str(melted_df)
ggplot(data = melted_df, aes(y = variable, x = section_name, fill = value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name)) +
geom_tile(aes(fill = value)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
ggplot(data = melted_df, aes(y = variable, x = section_name)) +
geom_raster(aes(fill = value)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5))
install.packages("superheat")
library("superheat")
superheat(melted_df)
head(melted_df)
superheat(section_matrix)
View(section_matrix)
str(section_matrix)
str(section_matrix)
View(section_matrix)
section_matrix = as.matrix(section_matrix)
superheat(section_matrix)
head(melted_df)
head(section_matrix$section_name)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% tolower(entries))
section_matrix[i, j] = presence
}
section_matrix
}
doc_list = unique(ob_lists_wood_w_id_text$id_text)
section_names = colnames(Q39_sections)
section_matrix = data.frame(sapply(doc_list, function(x) x = logical(length(section_names))), row.names = section_names)
colnames(section_matrix) = doc_list
doc_list = as.character(doc_list)
for (j in unique(doc_list)) {
entries = as.character(ob_lists_wood_w_id_text[which(ob_lists_wood_w_id_text$id_text == j),]$entry)
for (i in 1:ncol(Q39_sections)) {
presence = sum(Q39_sections[,i] %in% tolower(entries))
section_matrix[i, j] = presence
}
section_matrix
}
superheat(section_matrix)
install.packages("ggplot2", lib='/Library/Frameworks/R.framework/Versions/3.2/Resources/library')
install.packages("ggplot2", lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2", lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2", lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
